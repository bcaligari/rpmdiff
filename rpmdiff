#!/usr/bin/env python3
#
# Report on the differences between two lists of RPMs.
#    These can be:
#      * The output of `rpm -qa`.
#      * The `rpm.txt` from a supportconfig archive.
#      * A supportconfig archive.
#      * An expanded supportconfig directory.
#      * An sos report archive.
#      * An expanded sos report directory.
#
# Copyright (c) 2020-2021 Brendon Caligari <caligari@cypraea.co.uk>
#
# License: GNU Affero General Public License
#      https://www.gnu.org/licenses/agpl-3.0.en.html
#

import sys
import re
import logging
import argparse
import tarfile
from pathlib import Path
from textwrap import dedent
from tempfile import TemporaryDirectory


def ascii_table(table, colnames=None):
    """Converts a table to ascii."""
    # convert itertor to a list of lists of strings
    all_rows = [[*map(str, row)] for row in table]
    # check the right number of optional column names were passed
    if colnames and table:
        if len(colnames) != len(all_rows[0]):
            raise IndexError
    out = []
    if not table and not colnames:
        return out
    # work out the width for each column
    ncol = len(colnames) if colnames else len(all_rows[0])
    col_max = [0 for _ in range(ncol)]
    for row in all_rows:
        for col in range(ncol):
            col_max[col] = max(col_max[col], len(row[col]))
    if colnames:
        for col in range(ncol):
            col_max[col] = max(col_max[col], len(colnames[col]))
    # print out each line justified and separated
    if colnames:
        ruling = ["" for _ in range(ncol)]
        justified_header = map(lambda x: x[0].ljust(x[1]), zip(colnames, col_max))
        justified_ruling = map(lambda x: x[0].ljust(x[1], "-"), zip(ruling, col_max))
        out.append(" | ".join(justified_header).rstrip())
        out.append(" | ".join(justified_ruling).rstrip())
    for row in all_rows:
        justified_row = map(lambda x: x[0].ljust(x[1]), zip(row, col_max))
        out.append(" | ".join(justified_row).rstrip())
    return out


class VerTuple(object):
    """An orderable dot or plus sign separated tuple."""

    def __init__(self, ver_string):
        self._str = ver_string  # to preserve + or . delimiters
        self._elements = re.split(r"[.+]", ver_string)

    def _compare(self, other):
        for i in range(max(len(self._elements), len(other._elements))):
            a = self._elements[i] if i < len(self._elements) else None
            b = other._elements[i] if i < len(other._elements) else None
            if a is None:
                return -1
            if b is None:
                return 1
            if a.isnumeric() and b.isnumeric():
                if int(a) < int(b):
                    return -1
                elif int(a) > int(b):
                    return 1
            else:
                if a < b:
                    return -1
                elif a > b:
                    return 1
        return 0

    def __eq__(self, other):
        return self._compare(other) == 0

    def __lt__(self, other):
        return self._compare(other) == -1

    def __le__(self, other):
        return self._compare(other) != 1

    def __gt__(self, other):
        return self._compare(other) == 1

    def __ge__(self, other):
        return self._compare(other) != -1

    def __str__(self):
        return self._str

    def __hash__(self):
        return hash(self._str)


class RPM(object):
    """An RPM object representation."""

    def __init__(self, name, version, release, arch):
        """Initialise RPM from constituent filename parts."""
        self._name = name
        self._version = VerTuple(version)
        self._release = VerTuple(release)
        self._arch = arch

    @classmethod
    def from_name(cls, fullname):
        """Initialise RPM from <name>-<version>-<release>.<arch>[.rpm]"""
        fullname = fullname.strip()
        fullname = re.sub(r"\.rpm$", "", fullname)
        m = re.match(r"^(.+)-(.+)-(.+?)\.([a-z][a-z0-9_]+?)$", fullname)
        if m:
            return cls(m[1], m[2], m[3], m[4])
        else:
            return None

    def __lt__(self, other):
        return (self._name, self._version, self._release, self._arch) < (
            other._name,
            other._version,
            other._release,
            other._arch,
        )

    def __eq__(self, other):
        return (self._name, self._version, self._release, self._arch) == (
            other._name,
            other._version,
            other._release,
            other._arch,
        )

    def __repr__(self):
        return repr((self._name, self._version, self._release, self._arch))

    def __str__(self):
        return f"{self._name}-{self._version}-{self._release}.{self._arch}"


class RPMlist(object):
    """A queryable collection of RPM objects."""

    def __init__(self, rpmlist):
        """Initialise an RPMlist"""
        self._rpms = dict()
        for rpm in rpmlist:
            if not rpm._name in self._rpms:
                self._rpms[rpm._name] = dict()
            if not rpm._arch in self._rpms[rpm._name]:
                self._rpms[rpm._name][rpm._arch] = dict()
            if not rpm._version in self._rpms[rpm._name][rpm._arch]:
                self._rpms[rpm._name][rpm._arch][rpm._version] = list()
            self._rpms[rpm._name][rpm._arch][rpm._version].append(rpm._release)

    def get_archs(self, name):
        """Get list of architectures for a name."""
        return self._rpms[name].keys() if name in self._rpms else list()

    def get_names(self):
        """Get list of names of RPMs."""
        return self._rpms.keys()

    def get_versions(self, name, arch):
        """Get list of versions for a name and arch."""
        versions = []
        if name in self._rpms:
            if arch in self._rpms[name]:
                for version in self._rpms[name][arch]:
                    for release in self._rpms[name][arch][version]:
                        versions.append(tuple([version, release]))
        return versions

    @classmethod
    def from_name_list(cls, rpm_list):
        """Build a list of RPM objects from a list of rpm names."""
        rpms = []
        for name in rpm_list:
            rpm = RPM.from_name(name)
            if not rpm:
                logging.debug(f"Unable to parse RPM name {name}")
            else:
                rpms.append(rpm)
        return cls(rpms)


def diff_report(a, b):
    """Compare against another list of RPMs and generate a report"""
    # Build a sorted list of the package names in both lists
    results = []
    for name in sorted(list(set(a.get_names()) | set(b.get_names())), key=str.casefold):
        for arch in sorted(list(set(a.get_archs(name)) | set(b.get_archs(name))), key=str.casefold):
            code = "??"
            a_vers = a.get_versions(name, arch)
            b_vers = b.get_versions(name, arch)
            if max(len(a_vers), len(b_vers)) == 1:
                # single occurrence of RPM
                a_str = f"{a_vers[0][0]}-{a_vers[0][1]}" if len(a_vers) else ""
                b_str = f"{b_vers[0][0]}-{b_vers[0][1]}" if len(b_vers) else ""
                if len(a_vers) == 1 and len(b_vers) == 0:
                    code = "++"
                elif len(a_vers) == 0 and len(b_vers) == 1:
                    code = "--"
                else:
                    if a_vers == b_vers:
                        code = "=="
                    elif a_vers < b_vers:
                        code = "<<"
                    else:
                        code = ">>"
                results.append([code, name, arch, a_str, b_str])
            else:
                # multiversion RPM territory (e.g. kernel)
                all_vers = sorted(list(set(a_vers) | set(b_vers)))
                for ver in all_vers:
                    (a_str, b_str) = ("", "")
                    ver_str = f"{ver[0]}-{ver[1]}"
                    if ver in set(a_vers) and ver in set(b_vers):
                        (a_str, b_str) = (ver_str, ver_str)
                        code = ":="
                    elif ver in set(a_vers):
                        a_str = ver_str
                        code = ":+"
                    else:
                        b_str = ver_str
                        code = ":-"
                    results.append([code, name, arch, a_str, b_str])
    return results


class RPMListReader(object):
    """Parses a source for a hostname and an RPMList"""

    def __init__(self, src, name=None):
        self._filepath = Path(src)
        if name:
            self._name = name
        else:
            self._name = self._filepath.name
        self._rpm_filename_list = list()

    @property
    def rpms(self):
        return RPMlist.from_name_list(self._rpm_filename_list)

    @property
    def name(self):
        return self._name


class RPMListSupportConfigRPMTXT(RPMListReader):
    """RPMListReader for an rpm.txt from supportconfig"""

    def __init__(self, src, name=None):
        super().__init__(src, name)
        with open(self._filepath) as f:
            in_rpmqa_last = False
            for line in f.readlines():
                if not in_rpmqa_last:
                    in_rpmqa_last = line.startswith("# /bin/rpm -qa --last")
                    continue
                if line.startswith("#"):
                    break
                if not line.strip():
                    break
                m = re.match(r"^(.+?)\s", line)
                if m:
                    self._rpm_filename_list.append(m[1])


class RPMListPlain(RPMListReader):
    """RPMListReader for output of 'rpm -qa'"""

    def __init__(self, src, name=None):
        super().__init__(src, name)
        with open(self._filepath) as f:
            for line in f.readlines():
                m = re.match(r"^([^-]+-[^-]+.[^\s]+)\s*", line)
                if m:
                    self._rpm_filename_list.append(m[1])


class RPMListSupportConfigDir(RPMListSupportConfigRPMTXT):
    """RPMListReader for unpacked supportconfig"""

    def __init__(self, src, name=None):
        src_path = Path(src)
        rpm_txt = f"{Path(src_path, 'rpm.txt')}"
        basic_environment_txt = f"{Path(src_path, 'basic-environment.txt')}"
        logging.debug(f"Looking for hostname in {basic_environment_txt}")
        if Path(basic_environment_txt).is_file():
            with open(basic_environment_txt) as f:
                for line in f.readlines():
                    m = re.match(r"^Linux (.+?)\s", line)
                    if m:
                        name = m[1]
                        break
        super().__init__(rpm_txt, name)


class RPMListSOSReportDir(RPMListPlain):
    """RPMListReader for unpacked sosreport"""

    def __init__(self, src, name=None):
        src_path = Path(src)
        installed_rpms = f"{Path(src_path, 'installed-rpms')}"
        uname = f"{Path(src_path, 'uname')}"
        logging.debug(f"Looking for hostname in {uname}")
        if Path(uname).is_file():
            with open(uname) as f:
                for line in f.readlines():
                    m = re.match(r"^Linux (.+?)\s", line)
                    if m:
                        name = m[1]
                        break
        super().__init__(installed_rpms, name)


class RPMListSupportconfigTarBall(RPMListSupportConfigDir):
    """RPMListReader for supportconfig tarball"""

    def __init__(self, src, name=None):
        rpmtxt_subdir = None
        with TemporaryDirectory() as tmp_dir:
            logging.debug(f"Unpacking {src} to {tmp_dir}")
            with tarfile.open(src, mode="r:*") as tarball:
                for member in tarball.getnames():
                    m = re.match(r"([^/]*)/rpm.txt$", member)
                    if m:
                        rpmtxt_subdir = m[1]
                        tarball.extract(member, path=tmp_dir, set_attrs=False)
                        break
                for other_file in [f"{rpmtxt_subdir}/basic-environment.txt"]:
                    tarball.extract(other_file, path=tmp_dir, set_attrs=False)
            super().__init__(f"{tmp_dir}/{rpmtxt_subdir}")


class RPMListSOSReportTarBall(RPMListSOSReportDir):
    """RPMListReader for sos report tarball"""

    def __init__(self, src, name=None):
        sos_subdir = None
        with TemporaryDirectory() as tmp_dir:
            logging.debug(f"Unpacking {src} to {tmp_dir}")
            with tarfile.open(src, mode="r:*") as tarball:
                for member in tarball.getnames():
                    m = re.match(r"([^/]*)/installed-rpms$", member)
                    if m:
                        sos_subdir = m[1]
                        break
                for file in ["uname", "installed-rpms"]:
                    with open(Path(tmp_dir, file), mode="wb") as f:
                        f.write(tarball.extractfile(f"{sos_subdir}/{file}").read())
            super().__init__(tmp_dir)


def rpm_list_source(rpmsource):
    """
    Read a list of rpms from a source

    Tries to work out whether what kind of source it is and returns an
    appropriate RPMListReader object.
    """
    assume_tarball = False
    source_path = Path(rpmsource)
    if not source_path.exists():
        raise FileNotFoundError

    if source_path.is_dir():
        if Path(source_path, 'rpm.txt').is_file():
            logging.debug(f"Assuming {rpmsource} is an unpacked supportconfig.")
            return RPMListSupportConfigDir(rpmsource)
        if Path(source_path, 'installed-rpms').is_file():
            logging.debug(f"Assuming {rpmsource} is an unpacked sos report.")
            return RPMListSOSReportDir(rpmsource)
        raise ValueError
    
    if source_path.is_file():
        try:
            with open(rpmsource) as f:
                for line in f.readlines():
                    if line.startswith("#==[ Command ]===="):
                        logging.debug(f"Assuming {rpmsource} is an rpm.txt from a supportconfig.")
                        return RPMListSupportConfigRPMTXT(rpmsource)
        except UnicodeDecodeError:
            assume_tarball = True

    if not assume_tarball:
        logging.debug(f"Assuming {rpmsource} is a plain list of RPMs.")
        return RPMListPlain(rpmsource)
    
    tarball_handler = None
    with tarfile.open(rpmsource, mode="r:*") as tarball:
        for member in tarball.getnames():
            m = re.match(r"([^/]*)/rpm.txt$", member)
            if m:
                logging.debug(f"Assuming {rpmsource} is a supportconfig tarball.")
                tarball_handler = RPMListSupportconfigTarBall
                break
            m = re.match(r"([^/]*)/installed-rpms$", member)
            if m:
                logging.debug(f"Assuming {rpmsource} is an sos report tarball.")
                tarball_handler = RPMListSOSReportTarBall
                break
    
    if tarball_handler:
        return tarball_handler(rpmsource)

    raise ValueError


if __name__ == "__main__":
    """Version diff between two lists of RPMs."""
    parser = argparse.ArgumentParser(
        prog="rpmdiff",
        description="Version diff between two lists of RPMs",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=dedent(
            """
            Legend:
              ++   present in first but not second
              --   present in second but not first
              ==   present in both at same revision
              <<   version in first lower than one in second
              >>   version in first higher than one in second
              :+   multiversion install present in first but not second
              :-   multiversion install present in second but not first
              :=   multiversion install present in both
            """
        ),
    )
    parser.add_argument("rpmlist0", help="A list of RPMs")
    parser.add_argument("rpmlist1", help="Another list of RPMs to compare against")
    parser.add_argument("--debug", help="Enable some debug logging", action="store_true")
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    rpm_source_0 = rpm_list_source(args.rpmlist0)
    rpm_source_1 = rpm_list_source(args.rpmlist1)

    diff = diff_report(rpm_source_0.rpms, rpm_source_1.rpms)

    try:
        print(
            "\n".join(
                ascii_table(
                    diff, colnames=["", "package", "arch", f"{rpm_source_0.name[:36]}", f"{rpm_source_1.name[:36]}"]
                )
            )
        )
    except BrokenPipeError:
        pass
